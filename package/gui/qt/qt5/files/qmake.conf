#
# qmake configuration for building with arm-linux-gnueabi-g++
#

MAKEFILE_GENERATOR      = UNIX
CONFIG                 += incremental
QMAKE_INCREMENTAL_STYLE = sublib

QT_QPA_DEFAULT_PLATFORM = eglfs

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)

# QMAKE_{INC,LIB}DIR_QT needs to be overridden,
# as they're set to $$[QT_INSTALL_{HEADERS,LIBS}] by default
# which are compiled into the qmake binary statically
QMAKE_INCDIR_QT		= $$(TARGET_INCDIRS)
QMAKE_LIBDIR_QT		= $$(TARGET_LIBDIRS)
QMAKE_INCDIR		= $$(TARGET_INCDIRS)
QMAKE_LIBDIR		= $$(TARGET_LIBDIRS)
QMAKE_MOC		= $$(STAGING_DIR_HOST)/bin/moc
QMAKE_UIC		= $$(STAGING_DIR_HOST)/bin/uic
QMAKE_RCC		= $$(STAGING_DIR_HOST)/bin/rcc
QMAKE_CC		= $$(TARGET_CC)
QMAKE_CXX		= $$(TARGET_CXX)
QMAKE_AR		= $$(TARGET_AR)
QMAKE_OBJCOPY		= $$(TARGET_OBJCOPY)
QMAKE_RANLIB		= $$(TARGET_RANLIB)
QMAKE_CFLAGS		= $$(TARGET_CFLAGS)
QMAKE_CXXFLAGS		= $$(TARGET_CXXFLAGS)
QMAKE_NM                =
QMAKE_LINK		= $$(TARGET_CXX)
QMAKE_LINK_SHLIB	= $$(TARGET_CXX)
QMAKE_LINK_C		= $$(TARGET_CC)
QMAKE_LFLAGS		= $$(TARGET_LDFLAGS) # this will end up in redundant "-L"-strings, as they're already in $QMAKE_LIBDIR_QT, however TARGET_LDFLAGS may contain not only directories but special linker options

#unset vars which would intefere with vars/flags passed over by OpenWrt
QMAKE_STRIP				= # do not strip
QMAKE_STRIPFLAGS_LIB			= # do not strip
QMAKE_CFLAGS_WARN_ON			= 
QMAKE_CFLAGS_WARN_OFF			= 
QMAKE_CFLAGS_RELEASE			= 
QMAKE_CFLAGS_DEBUG			= 
QMAKE_CFLAGS_PRECOMPILE			= 
QMAKE_CFLAGS_USE_PRECOMPILE		= 
QMAKE_CXXFLAGS_WARN_ON			= 
QMAKE_CXXFLAGS_WARN_OFF			= 
QMAKE_CXXFLAGS_RELEASE			= 
QMAKE_CXXFLAGS_DEBUG			= 
QMAKE_CXXFLAGS_PRECOMPILE		= 
QMAKE_CXXFLAGS_USE_PRECOMPILE		= 
QMAKE_LFLAGS_RELEASE			= 

load(qt_config)
